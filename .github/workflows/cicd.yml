name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      TESTING: "true"
      PYTEST_CURRENT_TEST: "1"

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: |
          pytest tests/test_simple.py -v

      # Slack notification for test results
      - name: Slack Notification - Tests Failed
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: "#ci-cd"
          text: "üî¥ Tests failed for ${{ github.repository }} on branch ${{ github.ref_name }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Slack Notification - Tests Passed
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: "#ci-cd"
          text: "‚úÖ Tests passed for ${{ github.repository }} on branch ${{ github.ref_name }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/socials:latest

      # Slack notification for deployment
      - name: Slack Notification - Deployment Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: "#deployments"
          text: "üöÄ Successfully deployed ${{ github.repository }} to production!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Slack Notification - Deployment Failed
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: "#deployments"
          text: "‚ùå Deployment failed for ${{ github.repository }}. Please check the logs."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-to-render:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Create PostgreSQL Database
        run: |
          # Check if database exists
          DB_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
            "https://api.render.com/v1/databases?name=socials-db")

          if [[ $DB_RESPONSE == *"\"name\":\"socials-db\""* ]]; then
            # Database exists, get its ID
            DB_ID=$(echo $DB_RESPONSE | jq -r '.databases[0].id')
            echo "DB_ID=$DB_ID" >> $GITHUB_ENV
            echo "Database already exists with ID: $DB_ID"
          else
            # Create new database
            DB_RESPONSE=$(curl -X POST "https://api.render.com/v1/databases" \
              -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "name": "socials-db",
                "database": "socials",
                "user": "socials_user",
                "plan": "starter",
                "region": "oregon"
              }')
            
            DB_ID=$(echo $DB_RESPONSE | jq -r '.id')
            echo "DB_ID=$DB_ID" >> $GITHUB_ENV
            echo "Created new database with ID: $DB_ID"
            
            # Wait for database to be ready
            while true; do
              STATUS=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
                "https://api.render.com/v1/databases/$DB_ID" | jq -r '.status')
              
              if [[ $STATUS == "active" ]]; then
                echo "Database is ready!"
                break
              elif [[ $STATUS == "failed" ]]; then
                echo "Database creation failed!"
                exit 1
              fi
              
              echo "Database status: $STATUS"
              sleep 10
            done
          fi

          # Get database connection details
          DB_DETAILS=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
            "https://api.render.com/v1/databases/$DB_ID")

          DB_URL=$(echo $DB_DETAILS | jq -r '.connectionString')
          echo "DATABASE_URL=$DB_URL" >> $GITHUB_ENV

      - name: Create or Update Render Service
        run: |
          # Check if service exists
          SERVICE_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
            "https://api.render.com/v1/services?name=socials-app")

          if [[ $SERVICE_RESPONSE == *"\"name\":\"socials-app\""* ]]; then
            # Service exists, get its ID
            SERVICE_ID=$(echo $SERVICE_RESPONSE | jq -r '.services[0].id')
            echo "SERVICE_ID=$SERVICE_ID" >> $GITHUB_ENV
            
            # Update existing service
            curl -X PATCH "https://api.render.com/v1/services/$SERVICE_ID" \
              -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "image": "${{ secrets.DOCKERHUB_USERNAME }}/socials:latest",
                "autoDeploy": true,
                "envVars": [
                  {
                    "key": "DATABASE_URL",
                    "value": "${{ env.DATABASE_URL }}"
                  }
                ]
              }'
          else
            # Create new service
            RESPONSE=$(curl -X POST "https://api.render.com/v1/services" \
              -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{
                "name": "socials-app",
                "type": "web",
                "image": "${{ secrets.DOCKERHUB_USERNAME }}/socials:latest",
                "env": "docker",
                "plan": "starter",
                "region": "oregon",
                "autoDeploy": true,
                "numInstances": 1,
                "envVars": [
                  {
                    "key": "DATABASE_URL",
                    "value": "${{ env.DATABASE_URL }}"
                  }
                ]
              }')
            
            SERVICE_ID=$(echo $RESPONSE | jq -r '.id')
            echo "SERVICE_ID=$SERVICE_ID" >> $GITHUB_ENV
          fi

      - name: Deploy to Render
        uses: render-actions/deploy@v1
        with:
          team_id: ${{ secrets.RENDER_TEAM_ID }}
          token: ${{ secrets.RENDER_API_TOKEN }}
          service_id: ${{ env.SERVICE_ID }}
          image: ${{ secrets.DOCKERHUB_USERNAME }}/socials:latest

      - name: Wait for Deployment
        run: |
          # Wait for deployment to complete
          while true; do
            STATUS=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_TOKEN }}" \
              "https://api.render.com/v1/services/${{ env.SERVICE_ID }}/deploys" | jq -r '.deploys[0].status')
            
            if [[ $STATUS == "live" ]]; then
              echo "Deployment successful!"
              break
            elif [[ $STATUS == "failed" ]]; then
              echo "Deployment failed!"
              exit 1
            fi
            
            echo "Deployment status: $STATUS"
            sleep 10
          done

      - name: Slack Notification - Render Deployment Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: "#deployments"
          text: "üöÄ Successfully deployed ${{ github.repository }} to Render.com! Service ID: ${{ env.SERVICE_ID }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Slack Notification - Render Deployment Failed
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: "#deployments"
          text: "‚ùå Render deployment failed for ${{ github.repository }}. Please check the logs."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Notify on workflow completion
  notify:
    runs-on: ubuntu-latest
    needs: [test, build-and-push]
    if: always()
    steps:
      - name: Slack Notification - Workflow Summary
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#ci-cd-summary"
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            Workflow completed for *${{ github.repository }}*

            üìä *Summary:*
            ‚Ä¢ Tests: ${{ needs.test.result }}
            ‚Ä¢ Deployment: ${{ needs.build-and-push.result }}
            ‚Ä¢ Triggered by: ${{ github.actor }}
            ‚Ä¢ Branch: ${{ github.ref_name }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
